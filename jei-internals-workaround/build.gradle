import java.util.zip.ZipFile

archivesBaseName = rootProject.name + "-" + project.name

dependencies {
    forge("net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}")
}

loom {
    forge {
        mixinConfig "rei-jei-internals-workaround.mixins.json"
    }
}

processResources {
    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
    inputs.property "version", project.version
}

unifiedPublishing {
    project {
        displayName = "[Forge $rootProject.supported_version] v$project.version"
        releaseType = "release"
        gameVersions = ["1.18.2"]
        gameLoaders = ["forge"]
        changelog = rootProject.releaseChangelog

        mainPublication remapJar

        if (project.hasProperty("danielshe_curse_api_key") || System.getenv("danielshe_curse_api_key") != null) {
            curseforge {
                token = project.hasProperty("danielshe_curse_api_key") ? project.property("danielshe_curse_api_key") : System.getenv("danielshe_curse_api_key")
                id = "521393"
                gameVersions.addAll "Java 17"
            }
        }

        if (project.hasProperty("modrinth_key") || System.getenv("modrinth_key") != null) {
            modrinth {
                token = project.hasProperty("modrinth_key") ? project.property("modrinth_key") : System.getenv("modrinth_key")
                id = "1PfY6b5p"
                version = "$project.version+$project.name"
            }
        }
    }
}

task updateJEIAssets {
    doLast {
        File jeiZip = file("build/jei.zip")
        jeiZip.delete()
        jeiZip.parentFile.mkdirs()
        jeiZip.withOutputStream { out ->
            new URL("https://github.com/mezz/JustEnoughItems/archive/refs/heads/1.18.zip").withInputStream { from -> out << from; }
        }
        new ZipFile(jeiZip).withCloseable { ZipFile zip ->
            zip.stream().forEach { entry ->
                String path = entry.name.substring(entry.name.indexOf('/') + 1)
                if (path.startsWith("src/main/resources/assets") && !entry.isDirectory()) {
                    File newFile = file(path)
                    newFile.delete()
                    newFile.parentFile.mkdirs()
                    newFile.withOutputStream { out ->
                        out << zip.getInputStream(entry)
                    }
                }
            }
        }
    }
}
